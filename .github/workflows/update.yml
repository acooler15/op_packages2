# This is a basic workflow to help you get started with Actions

name: UPDATE

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  schedule:
    - cron: '30 1,7,13,19 * * *'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Git config
        run: |
          git config --global user.email "acooler15@foxmail.com"
          git config --global user.name "acooler15"

      - name: Init
        run: |
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          # git checkout -b temp $(git log --pretty=format:"%h" --reverse ./README.md | head -1)
          chmod +x ${GITHUB_WORKSPACE}/.github/scripts/*.sh
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Git subtree split
        run: |
          # setting op_packages
          op_packages='https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git'

          # coolsnowwolf/lede
          cd /workdir
          git clone https://github.com/coolsnowwolf/lede.git
          cd lede
          git remote add op_packages ${op_packages}
          packages=('automount' 'ntfs3-oot' 'ntfs3-mount')
          for package in ${packages[@]}; do \
            ${GITHUB_WORKSPACE}/.github/scripts/package.sh $(pwd) package/lean/${package} ${package} op_packages ; \
          done

          # coolsnowwolf/packages
          cd /workdir
          git clone https://github.com/coolsnowwolf/packages.git
          cd packages
          git remote add op_packages ${op_packages}
          packages=('pdnsd-alt' 'redsocks2' 'dns2socks' 'ipt2socks' 'microsocks')
          for package in ${packages[@]}; do \
            ${GITHUB_WORKSPACE}/.github/scripts/package.sh $(pwd) net/${package} ${package} op_packages ; \
          done

          # luci-app-dockerman
          # cd /workdir
          # git clone https://github.com/lisaac/luci-app-dockerman.git
          # cd luci-app-dockerman
          # git remote add op_packages ${op_packages}
          # git pull --rebase op_packages luci-app-dockerman
          # git push -f op_packages $(git rev-parse --abbrev-ref HEAD):luci-app-dockerman

          # helloworld
          # cd /workdir
          # git clone https://github.com/fw876/helloworld.git
          # cd helloworld
          # git remote add op_packages ${op_packages}
          # git pull --commit --no-edit --ff op_packages helloworld
          # git push -f op_packages $(git rev-parse --abbrev-ref HEAD):helloworld

